// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * QC Write API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

package qcwriteapi

import (
	"encoding/json"
	"github.com/QuantumCoinProject/qc/log"
	"io"
	"net/http"
	"strings"
	"errors"
)

const API_KEY_HEADER_NAME = "X-Api-Key"
const REQUEST_ID_HEADER_NAME = "X-Request-Id"

// WriteApiAPIController binds http requests to an api service and writes the service results to the http response
type WriteApiAPIController struct {
	service WriteApiAPIServicer
	errorHandler ErrorHandler
	corsAllowedOrigins string
	enableAuth bool
	apiKeysMap map[string]bool
}

// WriteApiAPIOption for how the controller is set up.
type WriteApiAPIOption func(*WriteApiAPIController)

// WithWriteApiAPIErrorHandler inject ErrorHandler into controller
func WithWriteApiAPIErrorHandler(h ErrorHandler) WriteApiAPIOption {
	return func(c *WriteApiAPIController) {
		c.errorHandler = h
	}
}

// NewWriteApiAPIController creates a default api controller
func NewWriteApiAPIController(s WriteApiAPIServicer, corsAllowedOrigins string, enableAuth bool, apiKeys string, opts ...WriteApiAPIOption) *WriteApiAPIController {
	controller := &WriteApiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
		corsAllowedOrigins: corsAllowedOrigins,
		enableAuth: enableAuth,
		apiKeysMap: make(map[string]bool),
	}

	if len(apiKeys) > 0 {
		apiKeyList := strings.Split(apiKeys, ",")
		for _, key := range apiKeyList {
			if len(key) == 0 {
				continue
			}
			controller.apiKeysMap[key] = true
		}
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WriteApiAPIController
func (c *WriteApiAPIController) Routes() Routes {
	return Routes{
		"SendTransaction": Route{
			strings.ToUpper("Post"),
			"/transactions",
			c.SendTransaction,
		},
	}
}

func (c *WriteApiAPIController) setupCORS(w *http.ResponseWriter, req *http.Request) {
	(*w).Header().Set("Access-Control-Allow-Origin", c.corsAllowedOrigins)
	(*w).Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT")
	(*w).Header().Set("Access-Control-Allow-Headers", "*")
}

func (c *WriteApiAPIController) authorize(w http.ResponseWriter, req *http.Request) bool {
	if c.enableAuth == false {
		return  true
	}

	if req.Header == nil {
		return  false
	}

	apiKey := req.Header.Get(API_KEY_HEADER_NAME)

	if len(apiKey) == 0 {
		return false
	}

	if c.apiKeysMap[apiKey] == true {
		return true
	}

	return false
}

// SendTransaction - Send Transaction
func (c *WriteApiAPIController) SendTransaction(w http.ResponseWriter, r *http.Request) {
	if r.Header != nil {
		requestId := r.Header.Get(REQUEST_ID_HEADER_NAME)

		if len(requestId) > 0 {
			log.Info("SendTransaction", "requestId", requestId)
		}
	}

	c.setupCORS(&w, r)
	if (*r).Method == "OPTIONS" {
		return
	}

	if c.authorize(w, r) == false {
		result := Response(http.StatusUnauthorized, nil)
		// If no error, encode the body and the result code
		_ = EncodeJSONResponse(result.Body, &result.Code, w)

		c.errorHandler(w, r, errors.New("Unauthorized"), &result)
		return
	}

	sendTransactionRequestParam := SendTransactionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sendTransactionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSendTransactionRequestRequired(sendTransactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSendTransactionRequestConstraints(sendTransactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendTransaction(r.Context(), sendTransactionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		if result.Code == http.StatusMethodNotAllowed {
			result = Response(http.StatusBadRequest, result.Body)
		}
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
