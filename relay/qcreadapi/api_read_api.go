// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * QC Read API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

package qcreadapi

import (
	"errors"
	"github.com/QuantumCoinProject/qc/log"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

const API_KEY_HEADER_NAME = "X-Api-Key"
const REQUEST_ID_HEADER_NAME = "X-Request-Id"

// ReadApiAPIController binds http requests to an api service and writes the service results to the http response
type ReadApiAPIController struct {
	service ReadApiAPIServicer
	errorHandler ErrorHandler
	corsAllowedOrigins string
	enableAuth bool
	apiKeysMap map[string]bool
}

// ReadApiAPIOption for how the controller is set up.
type ReadApiAPIOption func(*ReadApiAPIController)

// WithReadApiAPIErrorHandler inject ErrorHandler into controller
func WithReadApiAPIErrorHandler(h ErrorHandler) ReadApiAPIOption {
	return func(c *ReadApiAPIController) {
		c.errorHandler = h
	}
}

// NewReadApiAPIController creates a default api controller
func NewReadApiAPIController(s ReadApiAPIServicer, corsAllowedOrigins string, enableAuth bool, apiKeys string, opts ...ReadApiAPIOption) *ReadApiAPIController {
	controller := &ReadApiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
		corsAllowedOrigins: corsAllowedOrigins,
		enableAuth: enableAuth,
		apiKeysMap: make(map[string]bool),
	}

	if len(apiKeys) > 0 {
		apiKeyList := strings.Split(apiKeys, ",")
		for _, key := range apiKeyList {
			if len(key) == 0 {
				continue
			}
			controller.apiKeysMap[key] = true
		}
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReadApiAPIController
func (c *ReadApiAPIController) Routes() Routes {
	return Routes{
		"GetLatestBlockDetails": Route{
			strings.ToUpper("Get"),
			"/latestblock",
			c.GetLatestBlockDetails,
		},
		"GetAccountDetails": Route{
			strings.ToUpper("Get"),
			"/account/{address}",
			c.GetAccountDetails,
		},
		"GetTransactionDetails": Route{
			strings.ToUpper("Get"),
			"/transaction/{hash}",
			c.GetTransactionDetails,
		},
		"ListAccountTransactions": Route{
			strings.ToUpper("Get"),
			"/account/{address}/transactions/{pageNumber}",
			c.ListAccountTransactions,
		},
	}
}

func (c *ReadApiAPIController) setupCORS(w *http.ResponseWriter, req *http.Request) {
	(*w).Header().Set("Access-Control-Allow-Origin", c.corsAllowedOrigins)
	(*w).Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT")
	//(*w).Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Api-Key")
	(*w).Header().Set("Access-Control-Allow-Headers", "*")
}

func (c *ReadApiAPIController) authorize(req *http.Request) bool {
	if c.enableAuth == false {
		return  true
	}

	if req.Header == nil {
		return  false
	}

	apiKey := req.Header.Get(API_KEY_HEADER_NAME)

	if len(apiKey) == 0 {
		return false
	}

	if c.apiKeysMap[apiKey] == true {
		return true
	}

	return false
}

// GetLatestBlockDetails - Get latest block details
func (c *ReadApiAPIController) GetLatestBlockDetails(w http.ResponseWriter, r *http.Request) {
	if r.Header != nil {
		requestId := r.Header.Get(REQUEST_ID_HEADER_NAME)

		if len(requestId) > 0 {
			log.Info("GetLatestBlockDetails", "requestId", requestId)
		}
	}

	c.setupCORS(&w, r)
	if (*r).Method == "OPTIONS" {
		return
	}

	if c.authorize(r) == false {
		result := Response(http.StatusUnauthorized, nil)
		// If no error, encode the body and the result code
		_ = EncodeJSONResponse(result.Body, &result.Code, w)

		c.errorHandler(w, r, errors.New("Unauthorized"), &result)
		return
	}

	result, err := c.service.GetLatestBlockDetails(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAccountDetails - Get account details
func (c *ReadApiAPIController) GetAccountDetails(w http.ResponseWriter, r *http.Request) {
	if r.Header != nil {
		requestId := r.Header.Get(REQUEST_ID_HEADER_NAME)

		if len(requestId) > 0 {
			log.Info("GetAccountDetails", "requestId", requestId)
		}
	}

	c.setupCORS(&w, r)
	if (*r).Method == "OPTIONS" {
		return
	}

	if c.authorize(r) == false {
		result := Response(http.StatusUnauthorized, nil)
		// If no error, encode the body and the result code
		_ = EncodeJSONResponse(result.Body, &result.Code, w)

		c.errorHandler(w, r, errors.New("Unauthorized"), &result)
		return
	}

	params := mux.Vars(r)
	addressParam := params["address"]
	if addressParam == "" {
		c.errorHandler(w, r, &RequiredError{"address"}, nil)
		return
	}

	result, err := c.service.GetAccountDetails(r.Context(), addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransaction - Get Transaction
func (c *ReadApiAPIController) GetTransactionDetails(w http.ResponseWriter, r *http.Request) {
	if r.Header != nil {
		requestId := r.Header.Get(REQUEST_ID_HEADER_NAME)

		if len(requestId) > 0 {
			log.Info("GetTransactionDetails", "requestId", requestId)
		}
	}

	c.setupCORS(&w, r)
	if (*r).Method == "OPTIONS" {
		return
	}

	if c.authorize(r) == false {
		result := Response(http.StatusUnauthorized, nil)
		// If no error, encode the body and the result code
		_ = EncodeJSONResponse(result.Body, &result.Code, w)

		c.errorHandler(w, r, errors.New("Unauthorized"), &result)
		return
	}

	params := mux.Vars(r)
	hashParam := params["hash"]
	if hashParam == "" {
		c.errorHandler(w, r, &RequiredError{"hash"}, nil)
		return
	}
	result, err := c.service.GetTransactionDetails(r.Context(), hashParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListAccountTransactions - List account transactions
func (c *ReadApiAPIController) ListAccountTransactions(w http.ResponseWriter, r *http.Request) {
	if r.Header != nil {
		requestId := r.Header.Get(REQUEST_ID_HEADER_NAME)

		if len(requestId) > 0 {
			log.Info("ListAccountTransactions", "requestId", requestId)
		}
	}

	c.setupCORS(&w, r)
	if (*r).Method == "OPTIONS" {
		return
	}

	if c.authorize(r) == false {
		result := Response(http.StatusUnauthorized, nil)
		// If no error, encode the body and the result code
		_ = EncodeJSONResponse(result.Body, &result.Code, w)

		c.errorHandler(w, r, errors.New("Unauthorized"), &result)
		return
	}

	params := mux.Vars(r)
	addressParam := params["address"]
	if addressParam == "" {
		c.errorHandler(w, r, &RequiredError{"address"}, nil)
		return
	}
	pageNumberParam := params["pageNumber"]
	if pageNumberParam == "" {
		c.errorHandler(w, r, &RequiredError{"pageNumber"}, nil)
		return
	}
	pageNumber, err := strconv.ParseInt(pageNumberParam, 10, 64)
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if pageNumber <= 0 {
		pageNumber = -1
	}

	result, err := c.service.ListAccountTransactions(r.Context(), addressParam, pageNumber)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
