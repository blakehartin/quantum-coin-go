// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package address

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/QuantumCoinProject/qc"
	"github.com/QuantumCoinProject/qc/accounts/abi"
	"github.com/QuantumCoinProject/qc/accounts/abi/bind"
	"github.com/QuantumCoinProject/qc/common"
	"github.com/QuantumCoinProject/qc/core/types"
	"github.com/QuantumCoinProject/qc/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"step\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkerBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"testerBalance\",\"type\":\"uint256\"}],\"name\":\"ContractBalances\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DelegateCallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"DeployedContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DeployedContractsCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"testName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TestCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCheckerOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTesterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"}],\"name\":\"runAllTestsWithDefaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddToArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddToMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddressCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCheckArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCheckMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testCheckSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testDelNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"testDelegateCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"testDeployNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"testGetDeployedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testGetDeployedContractsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testIsContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testLogAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"testNestedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testSendEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"testSetAndCheckOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"name\":\"testSimpleStruct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testUniqueAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testValidateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressCaller) GetCheckerOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getCheckerOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressSession) GetCheckerOwner() (common.Address, error) {
	return _Address.Contract.GetCheckerOwner(&_Address.CallOpts)
}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressCallerSession) GetCheckerOwner() (common.Address, error) {
	return _Address.Contract.GetCheckerOwner(&_Address.CallOpts)
}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressCaller) GetRunCaller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getRunCaller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressSession) GetRunCaller() (common.Address, error) {
	return _Address.Contract.GetRunCaller(&_Address.CallOpts)
}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressCallerSession) GetRunCaller() (common.Address, error) {
	return _Address.Contract.GetRunCaller(&_Address.CallOpts)
}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressCaller) GetTesterBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getTesterBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressSession) GetTesterBalance() (*big.Int, error) {
	return _Address.Contract.GetTesterBalance(&_Address.CallOpts)
}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressCallerSession) GetTesterBalance() (*big.Int, error) {
	return _Address.Contract.GetTesterBalance(&_Address.CallOpts)
}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressCaller) TestCheckArray(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testCheckArray", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressSession) TestCheckArray(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckArray(&_Address.CallOpts, _addr)
}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestCheckArray(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckArray(&_Address.CallOpts, _addr)
}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressCaller) TestCheckMapping(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testCheckMapping", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressSession) TestCheckMapping(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckMapping(&_Address.CallOpts, _addr)
}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestCheckMapping(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckMapping(&_Address.CallOpts, _addr)
}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressCaller) TestDelNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testDelNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressSession) TestDelNumber() (*big.Int, error) {
	return _Address.Contract.TestDelNumber(&_Address.CallOpts)
}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressCallerSession) TestDelNumber() (*big.Int, error) {
	return _Address.Contract.TestDelNumber(&_Address.CallOpts)
}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressCaller) TestIsContract(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testIsContract", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressSession) TestIsContract(_addr common.Address) (bool, error) {
	return _Address.Contract.TestIsContract(&_Address.CallOpts, _addr)
}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestIsContract(_addr common.Address) (bool, error) {
	return _Address.Contract.TestIsContract(&_Address.CallOpts, _addr)
}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressCaller) TestValidateAddress(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testValidateAddress", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressSession) TestValidateAddress(_addr common.Address) (bool, error) {
	return _Address.Contract.TestValidateAddress(&_Address.CallOpts, _addr)
}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestValidateAddress(_addr common.Address) (bool, error) {
	return _Address.Contract.TestValidateAddress(&_Address.CallOpts, _addr)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests1(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests1", _addressChecker, add1, add2)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests1(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests1(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests1(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests1(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests2(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests2", _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests2(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests2(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests2(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests2(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests3(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests3", _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests3(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests3(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests3(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests3(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests4(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests4", _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests4(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests4(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests4(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests4(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressTransactor) RunAllTestsWithDefaultAddress(opts *bind.TransactOpts, _addressChecker common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTestsWithDefaultAddress", _addressChecker)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressSession) RunAllTestsWithDefaultAddress(_addressChecker common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTestsWithDefaultAddress(&_Address.TransactOpts, _addressChecker)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressTransactorSession) RunAllTestsWithDefaultAddress(_addressChecker common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTestsWithDefaultAddress(&_Address.TransactOpts, _addressChecker)
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressTransactor) RunTestSet1(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet1")
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressSession) RunTestSet1() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet1(&_Address.TransactOpts)
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressTransactorSession) RunTestSet1() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet1(&_Address.TransactOpts)
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressTransactor) RunTestSet2(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet2")
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressSession) RunTestSet2() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet2(&_Address.TransactOpts)
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressTransactorSession) RunTestSet2() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet2(&_Address.TransactOpts)
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressTransactor) RunTestSet3(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet3")
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressSession) RunTestSet3() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet3(&_Address.TransactOpts)
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressTransactorSession) RunTestSet3() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet3(&_Address.TransactOpts)
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressTransactor) RunTestSet4(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet4")
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressSession) RunTestSet4() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet4(&_Address.TransactOpts)
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressTransactorSession) RunTestSet4() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet4(&_Address.TransactOpts)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressTransactor) TestAddToArray(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddToArray", _addr)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressSession) TestAddToArray(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToArray(&_Address.TransactOpts, _addr)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestAddToArray(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToArray(&_Address.TransactOpts, _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressTransactor) TestAddToMapping(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddToMapping", _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressSession) TestAddToMapping(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToMapping(&_Address.TransactOpts, _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestAddToMapping(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToMapping(&_Address.TransactOpts, _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressTransactor) TestAddressCall(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddressCall", _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressSession) TestAddressCall(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddressCall(&_Address.TransactOpts, _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressTransactorSession) TestAddressCall(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddressCall(&_Address.TransactOpts, _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressTransactor) TestBlacklist(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testBlacklist", _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressSession) TestBlacklist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestBlacklist(&_Address.TransactOpts, _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestBlacklist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestBlacklist(&_Address.TransactOpts, _addr)
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressTransactor) TestCheckSender(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testCheckSender")
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressSession) TestCheckSender() (*types.Transaction, error) {
	return _Address.Contract.TestCheckSender(&_Address.TransactOpts)
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressTransactorSession) TestCheckSender() (*types.Transaction, error) {
	return _Address.Contract.TestCheckSender(&_Address.TransactOpts)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressTransactor) TestCodeHash(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testCodeHash", _addr)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressSession) TestCodeHash(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestCodeHash(&_Address.TransactOpts, _addr)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressTransactorSession) TestCodeHash(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestCodeHash(&_Address.TransactOpts, _addr)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressTransactor) TestDelegateCall(opts *bind.TransactOpts, _number *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testDelegateCall", _number)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressSession) TestDelegateCall(_number *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDelegateCall(&_Address.TransactOpts, _number)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressTransactorSession) TestDelegateCall(_number *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDelegateCall(&_Address.TransactOpts, _number)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressTransactor) TestDeployNewContract(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testDeployNewContract", _value)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressSession) TestDeployNewContract(_value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDeployNewContract(&_Address.TransactOpts, _value)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressTransactorSession) TestDeployNewContract(_value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDeployNewContract(&_Address.TransactOpts, _value)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressTransactor) TestGetDeployedContract(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testGetDeployedContract", index)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressSession) TestGetDeployedContract(index *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContract(&_Address.TransactOpts, index)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressTransactorSession) TestGetDeployedContract(index *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContract(&_Address.TransactOpts, index)
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressTransactor) TestGetDeployedContractsCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testGetDeployedContractsCount")
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressSession) TestGetDeployedContractsCount() (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContractsCount(&_Address.TransactOpts)
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressTransactorSession) TestGetDeployedContractsCount() (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContractsCount(&_Address.TransactOpts)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressTransactor) TestLogAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testLogAddress", _addr)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressSession) TestLogAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestLogAddress(&_Address.TransactOpts, _addr)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressTransactorSession) TestLogAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestLogAddress(&_Address.TransactOpts, _addr)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressTransactor) TestNestedMapping(opts *bind.TransactOpts, _addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testNestedMapping", _addr, key, value)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressSession) TestNestedMapping(_addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestNestedMapping(&_Address.TransactOpts, _addr, key, value)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressTransactorSession) TestNestedMapping(_addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestNestedMapping(&_Address.TransactOpts, _addr, key, value)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressTransactor) TestSendEther(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSendEther", _amount)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressSession) TestSendEther(_amount *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSendEther(&_Address.TransactOpts, _amount)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressTransactorSession) TestSendEther(_amount *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSendEther(&_Address.TransactOpts, _amount)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressTransactor) TestSetAndCheckOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSetAndCheckOwner", _newOwner)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressSession) TestSetAndCheckOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestSetAndCheckOwner(&_Address.TransactOpts, _newOwner)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressTransactorSession) TestSetAndCheckOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestSetAndCheckOwner(&_Address.TransactOpts, _newOwner)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressTransactor) TestSimpleStruct(opts *bind.TransactOpts, _addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSimpleStruct", _addr, data1, data2)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressSession) TestSimpleStruct(_addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSimpleStruct(&_Address.TransactOpts, _addr, data1, data2)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressTransactorSession) TestSimpleStruct(_addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSimpleStruct(&_Address.TransactOpts, _addr, data1, data2)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressTransactor) TestUniqueAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testUniqueAddress", _addr)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressSession) TestUniqueAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestUniqueAddress(&_Address.TransactOpts, _addr)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressTransactorSession) TestUniqueAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestUniqueAddress(&_Address.TransactOpts, _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressTransactor) TestWhitelist(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testWhitelist", _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressSession) TestWhitelist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestWhitelist(&_Address.TransactOpts, _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestWhitelist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestWhitelist(&_Address.TransactOpts, _addr)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressSession) Receive() (*types.Transaction, error) {
	return _Address.Contract.Receive(&_Address.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressTransactorSession) Receive() (*types.Transaction, error) {
	return _Address.Contract.Receive(&_Address.TransactOpts)
}

// AddressContractBalancesIterator is returned from FilterContractBalances and is used to iterate over the raw logs and unpacked data for ContractBalances events raised by the Address contract.
type AddressContractBalancesIterator struct {
	Event *AddressContractBalances // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressContractBalancesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressContractBalances)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressContractBalances)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressContractBalancesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressContractBalancesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressContractBalances represents a ContractBalances event raised by the Address contract.
type AddressContractBalances struct {
	Step           string
	CheckerBalance *big.Int
	TesterBalance  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContractBalances is a free log retrieval operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) FilterContractBalances(opts *bind.FilterOpts) (*AddressContractBalancesIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "ContractBalances")
	if err != nil {
		return nil, err
	}
	return &AddressContractBalancesIterator{contract: _Address.contract, event: "ContractBalances", logs: logs, sub: sub}, nil
}

// WatchContractBalances is a free log subscription operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) WatchContractBalances(opts *bind.WatchOpts, sink chan<- *AddressContractBalances) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "ContractBalances")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressContractBalances)
				if err := _Address.contract.UnpackLog(event, "ContractBalances", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractBalances is a log parse operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) ParseContractBalances(log types.Log) (*AddressContractBalances, error) {
	event := new(AddressContractBalances)
	if err := _Address.contract.UnpackLog(event, "ContractBalances", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDelegateCallExecutedIterator is returned from FilterDelegateCallExecuted and is used to iterate over the raw logs and unpacked data for DelegateCallExecuted events raised by the Address contract.
type AddressDelegateCallExecutedIterator struct {
	Event *AddressDelegateCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDelegateCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDelegateCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDelegateCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDelegateCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDelegateCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDelegateCallExecuted represents a DelegateCallExecuted event raised by the Address contract.
type AddressDelegateCallExecuted struct {
	Caller   common.Address
	NewValue *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDelegateCallExecuted is a free log retrieval operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) FilterDelegateCallExecuted(opts *bind.FilterOpts, caller []common.Address) (*AddressDelegateCallExecutedIterator, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Address.contract.FilterLogs(opts, "DelegateCallExecuted", callerRule)
	if err != nil {
		return nil, err
	}
	return &AddressDelegateCallExecutedIterator{contract: _Address.contract, event: "DelegateCallExecuted", logs: logs, sub: sub}, nil
}

// WatchDelegateCallExecuted is a free log subscription operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) WatchDelegateCallExecuted(opts *bind.WatchOpts, sink chan<- *AddressDelegateCallExecuted, caller []common.Address) (event.Subscription, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Address.contract.WatchLogs(opts, "DelegateCallExecuted", callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDelegateCallExecuted)
				if err := _Address.contract.UnpackLog(event, "DelegateCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateCallExecuted is a log parse operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) ParseDelegateCallExecuted(log types.Log) (*AddressDelegateCallExecuted, error) {
	event := new(AddressDelegateCallExecuted)
	if err := _Address.contract.UnpackLog(event, "DelegateCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDeployedContractAddressIterator is returned from FilterDeployedContractAddress and is used to iterate over the raw logs and unpacked data for DeployedContractAddress events raised by the Address contract.
type AddressDeployedContractAddressIterator struct {
	Event *AddressDeployedContractAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDeployedContractAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDeployedContractAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDeployedContractAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDeployedContractAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDeployedContractAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDeployedContractAddress represents a DeployedContractAddress event raised by the Address contract.
type AddressDeployedContractAddress struct {
	Index           *big.Int
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployedContractAddress is a free log retrieval operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) FilterDeployedContractAddress(opts *bind.FilterOpts) (*AddressDeployedContractAddressIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "DeployedContractAddress")
	if err != nil {
		return nil, err
	}
	return &AddressDeployedContractAddressIterator{contract: _Address.contract, event: "DeployedContractAddress", logs: logs, sub: sub}, nil
}

// WatchDeployedContractAddress is a free log subscription operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) WatchDeployedContractAddress(opts *bind.WatchOpts, sink chan<- *AddressDeployedContractAddress) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "DeployedContractAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDeployedContractAddress)
				if err := _Address.contract.UnpackLog(event, "DeployedContractAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContractAddress is a log parse operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) ParseDeployedContractAddress(log types.Log) (*AddressDeployedContractAddress, error) {
	event := new(AddressDeployedContractAddress)
	if err := _Address.contract.UnpackLog(event, "DeployedContractAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDeployedContractsCountIterator is returned from FilterDeployedContractsCount and is used to iterate over the raw logs and unpacked data for DeployedContractsCount events raised by the Address contract.
type AddressDeployedContractsCountIterator struct {
	Event *AddressDeployedContractsCount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDeployedContractsCountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDeployedContractsCount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDeployedContractsCount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDeployedContractsCountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDeployedContractsCountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDeployedContractsCount represents a DeployedContractsCount event raised by the Address contract.
type AddressDeployedContractsCount struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeployedContractsCount is a free log retrieval operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) FilterDeployedContractsCount(opts *bind.FilterOpts) (*AddressDeployedContractsCountIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "DeployedContractsCount")
	if err != nil {
		return nil, err
	}
	return &AddressDeployedContractsCountIterator{contract: _Address.contract, event: "DeployedContractsCount", logs: logs, sub: sub}, nil
}

// WatchDeployedContractsCount is a free log subscription operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) WatchDeployedContractsCount(opts *bind.WatchOpts, sink chan<- *AddressDeployedContractsCount) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "DeployedContractsCount")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDeployedContractsCount)
				if err := _Address.contract.UnpackLog(event, "DeployedContractsCount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContractsCount is a log parse operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) ParseDeployedContractsCount(log types.Log) (*AddressDeployedContractsCount, error) {
	event := new(AddressDeployedContractsCount)
	if err := _Address.contract.UnpackLog(event, "DeployedContractsCount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressSenderVerifiedIterator is returned from FilterSenderVerified and is used to iterate over the raw logs and unpacked data for SenderVerified events raised by the Address contract.
type AddressSenderVerifiedIterator struct {
	Event *AddressSenderVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressSenderVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressSenderVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressSenderVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressSenderVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressSenderVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressSenderVerified represents a SenderVerified event raised by the Address contract.
type AddressSenderVerified struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSenderVerified is a free log retrieval operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) FilterSenderVerified(opts *bind.FilterOpts, sender []common.Address) (*AddressSenderVerifiedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Address.contract.FilterLogs(opts, "SenderVerified", senderRule)
	if err != nil {
		return nil, err
	}
	return &AddressSenderVerifiedIterator{contract: _Address.contract, event: "SenderVerified", logs: logs, sub: sub}, nil
}

// WatchSenderVerified is a free log subscription operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) WatchSenderVerified(opts *bind.WatchOpts, sink chan<- *AddressSenderVerified, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Address.contract.WatchLogs(opts, "SenderVerified", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressSenderVerified)
				if err := _Address.contract.UnpackLog(event, "SenderVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSenderVerified is a log parse operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) ParseSenderVerified(log types.Log) (*AddressSenderVerified, error) {
	event := new(AddressSenderVerified)
	if err := _Address.contract.UnpackLog(event, "SenderVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressTestCompletedIterator is returned from FilterTestCompleted and is used to iterate over the raw logs and unpacked data for TestCompleted events raised by the Address contract.
type AddressTestCompletedIterator struct {
	Event *AddressTestCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressTestCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressTestCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressTestCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressTestCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressTestCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressTestCompleted represents a TestCompleted event raised by the Address contract.
type AddressTestCompleted struct {
	TestName string
	Message  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTestCompleted is a free log retrieval operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) FilterTestCompleted(opts *bind.FilterOpts) (*AddressTestCompletedIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "TestCompleted")
	if err != nil {
		return nil, err
	}
	return &AddressTestCompletedIterator{contract: _Address.contract, event: "TestCompleted", logs: logs, sub: sub}, nil
}

// WatchTestCompleted is a free log subscription operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) WatchTestCompleted(opts *bind.WatchOpts, sink chan<- *AddressTestCompleted) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "TestCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressTestCompleted)
				if err := _Address.contract.UnpackLog(event, "TestCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTestCompleted is a log parse operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) ParseTestCompleted(log types.Log) (*AddressTestCompleted, error) {
	event := new(AddressTestCompleted)
	if err := _Address.contract.UnpackLog(event, "TestCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
