package main

import (
	"encoding/base64"
	"fmt"
	"github.com/QuantumCoinProject/qc/crypto/cryptobase"
	"testing"
)

func TestParseEnr(t *testing.T) {
	enrString0 := "enr:-QrDuQbj3wY-AwMPACAchL6itYqEI90ODy_SFhZfEqkDTLNZl8x3c44gogBDGZCa-vfYJcebBpHza1lggY4LQbyEU8CfH0mB0jvoStAI45Bmn82OPQExRt01sy0blxMWR89DoJAwHvOA1XjtsMQvP-ji3xAS11Y1JTETJWTo8h-KMCozV8QoX7k7bYWD_9V44pAQKAm8KZHh8ZwUskVa9aZVVhJmyRHvCwOm3zcqehB8NZIkgzXDnrbsSlVUX2E1T5rnD8stbU8rvpUkDDNE8dnwA_FTwTz6GDy2DtZbdUxGJhSs_J9LNBV-kyIUaZSJNehlCH65sDh8pZmTXRCYt7Yio-7IlDW40bNtJHf5bVdidlSidLJAO130NepYUHUn0628zVjYBXdU08JcKdeOXkZjl9u6MJdpWiVLSZ2SPzRpxcba4GK1duWNhW5siHbGclTbJoObELPerBocel8Rodtn5vXFx3OiuPr9oYGr1yC1Sz4AwCWLzZGn3SVsPWKVv2clXBImdB6MifCC1IIzFkrirFTruc1hO_SIaodlZUtSBu_jPqpq7wi5Q_mLLRNsq5DIMRvelcgKDJLP-2q6TR9E6zGqLjnpaR4H609vzLVT9y0USVHW1YmlXBm28RFUlPZYtqTNfxiK4rYG2cbXi_8Ru28kppX6SeRJi-0-RyFYpMKIQKKzNkoWzcpZ98t54oXq2cnRJmZgEXlC65GMU-tv1k28MsgnchUPw_U2MdIS0oyiEVmV4cqSNeBSaTJkP_cRkdwzTHfUpG6hq1NQb6x59grBG3BPS8XDzUGLnUqvOCTi9SuFyOrBM13Ywjya8VDeQjGwoLg6GbzMxfoqieIfzud49nhD0GW0RQFYhFlYNUpX87o3ig71YWs8ClK9Ne-etiUO8BV4te_Fn1S6JmctS9pzGSqvIROodb_rW1j5QdNWW2EkJUShsHMaVaXXbTZwU478uTo8Wk8txmq2q3_BNUa7uQp-sl2StCLbhS_F8O6gpvue3qKtbDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwsXLSFvBn_QXKEdZ2ku1_S6WNsfs7y2rZN8CJ_n-dGykJPP7M197Iam9ZQMkyoGIZvWg2BxJ9AWgxKmZIvb1c_tv5x95BmT1LuN0SUx3NezAui4WOKmOxmcQbRevrjAIKpbV5E4eeewPAKnbGYKxSteG7J-38v5Ab5MibqSMK4HocW157vTQKCRQaKR65RQbUuZjwE7bZ5yV5eWBSiwAjMxovpI6sTAc5qrX5nHm5uHU1SEmQmIhKtEQa1EIxAQXjaQ6LJJuXWBBtJ8hoZdWew5tplnlwJw8iyMyiW855vExNhFZMC5KFRYMgDEMkMWNmisFhNWL89Wdfnwh11licQgx1doIF_ZC9ntFetQXYlQzFHSAj5Th4DEGQMoPsQrzStAGaVVN1kjBNgnZkliJ6HS_WoQ5riEYd94BJI9Ps1Z-CfIxWlYKBSUCyt31FQSFqycbQRgYKHIkkz8ShW0DoxONCIxs-iHc3mfRpqkQ0RVJkSiCfwa1Ey4Blu1J2Wt4EvP9IZe-GeehgNpNiiHAUP9jbmDUHfFYLF4DKsy2NUCSF-acOXAUdmq1EwchISksETShpGF7IQ3Ys1leHnBmnyVyJAosbv_6AVg9Y4jNdXurUlpuT1JgE7St9BdmPR74l60RKJYoA7PGVyGw6bIj_Suq0s_hP0oqZ8humaJ2EZmoydsWsuvCf8JJNnSLy9OKEKVN1ehp5v-GUlHgbd4ie4IUQJFrqofcm9E2GaeF3kYh8ya8OpEwl_gAjaa44Lk4gMEBxoEkmldOZNSRoJjbcWQVSFfgZZQrpLYGQM24KhjjwBJQuI_ApiHEJmp9TtO1VBxfiCZusrbZ74L8TOX96N2HdlFnDpLxdNgK8AQCd215Uuh6RjtaEokbekl7XMZVUOhlxDl2PpgjbaBNHWQi3lzJZ-F5cOjuFkI231iZZBFbnufJWM_sGEI5hwUHhlFC0CEjmgIlNRgLpk5cpID7-StNN54yTOkWheh2TNz7mWNiNLYVYK2uyUG9vNg52T97RkkrSGItL5W4lZBIG7TR1Gd46ZOBjeREDqVYEID-42of8wlgcnKm5bCUql_Sx1e7gPr36fQIHGVmHxdYVwGxLv-Qx-4jY4lY9mzd6H2agzHT2OJR0l9ZiGwycy5woKaY6H72ROVyqQd0IEL3ha9FXGzGWzsD4KCqc-GKS1pfmBC7tpVkZqqiV3MgISY52cgDrsx99liLCRKKNy04k71JalRUBg2V0aMfGhNZH7u-AgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxuQOhsXLSFvBn_QXKEdZ2ku1_S6WNsfs7y2rZN8CJ_n-dGykJPP7M197Iam9ZQMkyoGIZvWg2BxJ9AWgxKmZIvb1c_tv5x95BmT1LuN0SUx3NezAui4WOKmOxmcQbRevrjAIKpbV5E4eeewPAKnbGYKxSteG7J-38v5Ab5MibqSMK4HocW157vTQKCRQaKR65RQbUuZjwE7bZ5yV5eWBSiwAjMxovpI6sTAc5qrX5nHm5uHU1SEmQmIhKtEQa1EIxAQXjaQ6LJJuXWBBtJ8hoZdWew5tplnlwJw8iyMyiW855vExNhFZMC5KFRYMgDEMkMWNmisFhNWL89Wdfnwh11licQgx1doIF_ZC9ntFetQXYlQzFHSAj5Th4DEGQMoPsQrzStAGaVVN1kjBNgnZkliJ6HS_WoQ5riEYd94BJI9Ps1Z-CfIxWlYKBSUCyt31FQSFqycbQRgYKHIkkz8ShW0DoxONCIxs-iHc3mfRpqkQ0RVJkSiCfwa1Ey4Blu1J2Wt4EvP9IZe-GeehgNpNiiHAUP9jbmDUHfFYLF4DKsy2NUCSF-acOXAUdmq1EwchISksETShpGF7IQ3Ys1leHnBmnyVyJAosbv_6AVg9Y4jNdXurUlpuT1JgE7St9BdmPR74l60RKJYoA7PGVyGw6bIj_Suq0s_hP0oqZ8humaJ2EZmoydsWsuvCf8JJNnSLy9OKEKVN1ehp5v-GUlHgbd4ie4IUQJFrqofcm9E2GaeF3kYh8ya8OpEwl_gAjaa44Lk4gMEBxoEkmldOZNSRoJjbcWQVSFfgZZQrpLYGQM24KhjjwBJQuI_ApiHEJmp9TtO1VBxfiCZusrbZ74L8TOX96N2HdlFnDpLxdNgK8AQCd215Uuh6RjtaEokbekl7XMZVUOhlxDl2PpgjbaBNHWQi3lzJZ-F5cOjuFkI231iZZBFbnufJWM_sGEI5hwUHhlFC0CEjmgIlNRgLpk5cpID7-StNN54yTOkWheh2TNz7mWNiNLYVYK2uyUG9vNg52T97RkkrSGItL5W4lZBIG7TR1Gd46ZOBjeREDqVYEID-42of8wlgcnKm5bCUql_Sx1e7gPr36fQIHGVmHxdYVwGxLv-Qx-4jY4lY9mzd6H2agzHT2OJR0l9ZiGwycy5woKaY6H72ROVyqQd0IEL3ha9FXGzGWzsD4KCqc-GKS1pfmBC7tpVkZqqiV3MgISY52cgDrsx99liLCRKKNy04k71JalRWEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString1 := "enr:-QrDuQbj3wY-AwMTACCHzeinBNotS1PkzOCYYHbtB85LkIVCCbbbmMnD2mQMI-u9uNY9f_-hhp6lV-sm8etjJJ4SDA8Tpp5grUdaPgMMqE7cRKurXsUUVyBpEHyj3hP3eS3yURIRUJytwCucyQEDg7lBwg9aJ0WRLU9r-GRCfKyuiqADbSMNhBkGJHv9_6XecZJaw-HBKZRMjFQy4vbrEnLJBM8VSNIbLtHGiO_PQSx6nrm-9tffaJJZzFK_G0dIDKsnNDGGTcQXVPZIpLJY-YxTmy-Hoq1Ha9yZy3m4d7pEh9tNk1lWannPRGyqxDhU-LOj1eEh5LLK0rqGRblx6kk7TY5DYC3nm_k02fXwPsxRa2gSzM7lH0LZ-SZSQTmoZ9mcJCKHXo-uRD3_VbOetBoRCUeIeg2-Rd3vQx7D6dU4NbGr9WeurQxVg2KLNKUesjMl4je1-9SJqitGSTgEcs2hXaivFhNR8H-o6hZmrweRn0Og3wuDOYmelGQ836IpbB98ZTMDMEgpLERfsrAeX1MGoKwojsmhPVrHHs-6QhJoN0WswC9oP4oVrPvx-k3pSZLxUXz5DLNq3DjqtFizxBB5cKblMqk7CRMUd2tXnLMX-vgjyIx5L7ukmOGz0s8QRsvRJpz9MJjhOstzGOoja3HQqjmUckyJKa4Jzfel7Sb3PbLjIMqLZMjMHt8xEf5DGYnUOUNFFGY1nFPh7R05Prf4W-oMe5Nlar7Keh9GZDEshjfhI0m8nzbVzaMfSo3WKCEM5Ec3N6Ohm7_nIP_wkqhaBJzVH225HmggCjcG60rlc6evYjLPsrj_pBUWTQ4CM6TnuHPq9SDdq0uOunaHsS_3Rt_GpWWInmlFmDBW04tHI-dshIVquEyqD0pUyNfhCsqFNKy3JxEUXxVMgSeFQQwyG-hd01U-wzpv46wTJpIcLWXylpCgBy4zoJ7y-1qXyd7HtlgUmKBxpshUiZnexMswsGXUClq50uxYlbTaSUEyDLNY3c4ZBiN9PrDrX9gwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwF8wK4U48xbXd6HkwyPa4iPGBMuxb5cGtRwZC-BJBZ-sJOphd8fpBImzY8UK6HgkaPtQFESZuJTFixanaebYeV1FyW4Oq-HDkEwhWPRZSxWoaFQWyzIsKx9stbbRyn2W5kcT7IuJYf6q-rPTCXf8Ioj6yu55bC0LLVn8byqUIPytwLhmCzlXW60gai44i2FUM_3ZCvhENLyQW1lHgFK0ct8ChdSntQnVtBbHcKjuauAwpmeSnsh3nt80n4FWASMkzZnml4irWUAWGDYpYavqkWD_Qm7i0xMK8CKbTosCVPzjnkzLHJLgJ8TAqJYO2jRNZQMO2NtBIOkwbKoKMhYC_C318xVSzH2oNWYFqQC6PsxvsibuXK8oqrDT3gR5QEtL8utAldLOZlWq1Jm-pcVNrwu1RSKVjGmejOpP21fpGnXEGoGxX-k1BWDVgAejHfJNct-MFbOhvNTuhKyK4nhDQNB7Jf3EsiPqlrhiotJybTZ6wcQQIV-NQ4oV2KHSHzzqdKnQ2ZwMFf0mtZ4ZlolO1BOSOpJ0BUjWyVFqTaZoZOWgI5TceNNmhBJJz4T3xpZaPJPa7u4aiFwM6rSS67vm6JOZj6SvRkb0Z5CthOE6odYUrERy8Dp_rBtgICLaF9nHUQIelxML1gDKglG9YTU2fLc7YCLSDFrrdTYIvIro0-Ko3hoijcGkGIGkkChbgUrjhLC1mUBrDbQczjy2tYaGdg0FUseZ76XC1kjjbxs0ojipjpTwM9Dhabkn6lcutgIvDIGzORJjIuyYN4EuQ_bt6J2sbTA1ibpKmDBn8hdIrS2-E8dBlKgQa0dlXbwOAiCS51gmG8hBNo2n9XgVvXMRhjmGmaiD4EgUX8qS2E4dugjuYfK2kTaPcYRB6dKDcMgbQXzUMzaIXeJmpQuaiFILdZWbl3mydR6ueIpqULenAs8F7J-bHgAXdf2bRmoHLxPAxmSgTndRAtLrrmF0qeThlcbaOqTAXhAPjzqkBVuX_UkKriXAC0KmJl10YFn7g4FIZhq66ATqmh56U7rc8AgiNTUK3OSa3QeB72kmOxJ1uzRIhrLlkMtgQtIJeYFoJylUO53RABtbhalS45r-TnyW5OSQYq3ioooEGqCsxLciK4FhLsI2trsoLEU7RdqNIXebkzDwLTIX01EDNV6yqdEycxniW7yDdpt54FlMSEoJjh5h86DDN9Sa2FlnvxEYPNUP6RMIQS7Q_e_nRCbDtf6SmwjgBg2V0aMfGhHzVjjOAgmlkgnY0gmlwhMCoD4WJc2VjcDI1NmsxuQOhF8wK4U48xbXd6HkwyPa4iPGBMuxb5cGtRwZC-BJBZ-sJOphd8fpBImzY8UK6HgkaPtQFESZuJTFixanaebYeV1FyW4Oq-HDkEwhWPRZSxWoaFQWyzIsKx9stbbRyn2W5kcT7IuJYf6q-rPTCXf8Ioj6yu55bC0LLVn8byqUIPytwLhmCzlXW60gai44i2FUM_3ZCvhENLyQW1lHgFK0ct8ChdSntQnVtBbHcKjuauAwpmeSnsh3nt80n4FWASMkzZnml4irWUAWGDYpYavqkWD_Qm7i0xMK8CKbTosCVPzjnkzLHJLgJ8TAqJYO2jRNZQMO2NtBIOkwbKoKMhYC_C318xVSzH2oNWYFqQC6PsxvsibuXK8oqrDT3gR5QEtL8utAldLOZlWq1Jm-pcVNrwu1RSKVjGmejOpP21fpGnXEGoGxX-k1BWDVgAejHfJNct-MFbOhvNTuhKyK4nhDQNB7Jf3EsiPqlrhiotJybTZ6wcQQIV-NQ4oV2KHSHzzqdKnQ2ZwMFf0mtZ4ZlolO1BOSOpJ0BUjWyVFqTaZoZOWgI5TceNNmhBJJz4T3xpZaPJPa7u4aiFwM6rSS67vm6JOZj6SvRkb0Z5CthOE6odYUrERy8Dp_rBtgICLaF9nHUQIelxML1gDKglG9YTU2fLc7YCLSDFrrdTYIvIro0-Ko3hoijcGkGIGkkChbgUrjhLC1mUBrDbQczjy2tYaGdg0FUseZ76XC1kjjbxs0ojipjpTwM9Dhabkn6lcutgIvDIGzORJjIuyYN4EuQ_bt6J2sbTA1ibpKmDBn8hdIrS2-E8dBlKgQa0dlXbwOAiCS51gmG8hBNo2n9XgVvXMRhjmGmaiD4EgUX8qS2E4dugjuYfK2kTaPcYRB6dKDcMgbQXzUMzaIXeJmpQuaiFILdZWbl3mydR6ueIpqULenAs8F7J-bHgAXdf2bRmoHLxPAxmSgTndRAtLrrmF0qeThlcbaOqTAXhAPjzqkBVuX_UkKriXAC0KmJl10YFn7g4FIZhq66ATqmh56U7rc8AgiNTUK3OSa3QeB72kmOxJ1uzRIhrLlkMtgQtIJeYFoJylUO53RABtbhalS45r-TnyW5OSQYq3ioooEGqCsxLciK4FhLsI2trsoLEU7RdqNIXebkzDwLTIX01EDNV6yqdEycxniW7yDdpt54FlMSEoJjh5h86DDN9Sa2FlnvxEYPNUP6RMIQS7Q_e_nRCbDtf6SmwjiEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString2 := "enr:-QrDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString3 := "enr-QrDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"
	enrString4 := "enr:-rDuQbj3wY-AwMRACBYuY7rmuxiO-eqKGJvubYd5iJQ8RgFpfM1oTQOP-H9uzM6FSHMYg7ThP8mSAh7xtycCuU-0oeo2Syy-un39sYB4bujqMuy0yx48538a8MVxWAzMdg2B1kOi9dN8TUFI3hbBJaYuwyy-zW2WFKpF5Yjcs0do9nPg11fHS5bq9SUh3Al_5alLJlaKWdlVt5yemN_9BIh8r2s-lJNCNoJ10VHMZCcwgI0uqFAs8xRVMtH8aJ1ks1aFPSay8a8nW-bL07jd9l_PQ6y8xiLK19EJxHRY2roHScgiRRrt8oQy5ocqxz3oCNQRuh7leFDrNgle7GwXVxsMQZjHlVvJK5H8g3TR1jYwhs6L6aVfGQNqn8G6T4zpIFBheQGrluya-NdRK2HW3uom33bbTuQ6fbO5U9GXtkRyW0yFnweLRaXpBx1OxKpuApaRr54tFzZ0blIXppL8SSI5nhdubPEwhqcmo0T5_hoxJi_YJYM6uO8yfb22gxdnh3OzdHaCLTr3IkymHOjPGiVrsJPj46k9OeM_1LhRaHLhSfViX-Paq3PMy8UhQepZQsagKNe59c4AgbD0wzDmclr8kcTCE-Jq1v7uewWlW4RIxt8OxRgl-iiQtZNE-yVsmSlVeo_9nBiPOakTe0pxAMqxNexyysqVpNkxofiyFSjWWSbepNzsCfNTthyA80SJ7XE5jIxCl6eJ-Rq9ZFIEiJ_1uYvpTTMxzOyegNZixip7LTqZhT-LgHXXH33GenF-EP7egQrg1O9R1yKBVIycC0w3_N_0c2Z2R7Hl-ueN8sU-ShKongQr7ZP8w0sg9CIyVD6rLl5OP7MuRl3iC12Th3JLcA3cdJ7DNmissTzDY8y05i3DoLfNorTZ1Qndk8V2g5YNAhiHuTc-n8pclfWjDFbXBynrw5vaHjJZhkf3Y2LV7p4n92E00FwRCbRtl0QsUZRf7Y1XpAgZFVbk2NGtiujJTMFblVJ_shraIMrUNt2kTkQ2ntiOBaALoxaMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8MHg2V0aMfGhKGLiw-AgmlkgnY0gmlwhDQ1vj-Jc2VjcDI1NmsxuQOhnX135pQeuaqHNbRp_QZEg2m7IxJuNp2s_wqPHjB4QVsJPH4ytJvkLalg7usD53ERccS5Oqlbr3rbQa_m8QwY3aLt371_xqF6poWhTZDrNyxZPgq2PIcepgSyYGhHFdAWXNmRCLvvsT5coVjrK1UBtfZiLtWAhPks90QhX3gl-escVMBB2l9gyVeCgNJj6OhGInwK8UOhLae5fHoKDa4ANLAMdLheFWhmpJVs4eRtLXobVh9ceJrOWSLG00tenyGzYC-w9Z10-cXUbWBaFTnUg44kVoeNpmVEWO-AxKEUGHzS9iZW7Aq2fajFA8plcWuilxtvPE7syc4srB_R9ftSZIGcwF4n5W-2Wm2Yy4adRlStNTMdQZSICauak2LfH8Sq9FMdZqN8_Hd-SuQNFlyH3CH-aPpGhE1L_zFMh7dpY-8bbpDyhaSPsxCuygRv-zgaaqh5qH5BZdrkNdzoEH1OCLHsCDOySAcoBKFuDb8WrU__KJ5Hakcqmg79MqaT3SRVZkhybFU8m4QWC0wZu55cVKDHV14nVhjraJjPeBgmKZXmCm1SlPKmiZg-_QvX3M6sTl7bkGqXZApg1KJD5olKmGFq_yfIfFIOpUwINCBKHHTyCxRewiU0Vu-MC-wyGSRNym1J8RCb5pF5UYkLiQe3CvxVgrrNSAQ8BrSWHO-vhEgq6wWEVPEqqY7lsxBWwySzzf1eTjWTBet-XAxbqOajM086V2gQQRWUERBZ8hComN6VGASeDprV6hSVJvZKEhoL4MCYvfEs5M-G60khbyTjLkscoJmAl0P0plFJdIJTGae53rlYztqXejrbpwWRdok2uB5IrnGppghh4JhWdSEj8cbwD3E3ay9fXB3Scum41jiKPZWqGBAIIK1ZRyAPJzSFw4DjhCYB9HYrzs4xWbWcKnbm7HhefSOervcPTp87B2KQTCGCGF0Z558ab3k2QRts4DLGhk72CbDwa-lOJ7PMabYXh3K4wsl4PSGdoUXeqnIeDgLMs3lTx3dhfZg2Yc_CFsoeyoVqcDGWZ5H8nbVeoGhT_t7Qthg6xJOPGIdOflQEwoWszRxxfercixm6ViLJLlIZ3sG5I0ewTk9hvVgqj_0mZtpGR11EGqof4uqx0QUVz4rdQrzhZemTaiBtZ0Yxk0qhNVabnFetbDC9WHDAjVq0KWW3C5Q1nCmxqlR7VKoEiTwgIDOAAHBFVL9EjQnXQGQNrkxBKc_HED9NC6DZq8OEc25hcMCDdGNwgnZfg3VkcIJ2Xw"

	testEnr(enrString0, true, t)
	testEnr(enrString1, true, t)
	testEnr(enrString2, true, t)
	testEnr(enrString3, false, t)
	testEnr(enrString4, false, t)
}

func testEnr(enrString string, shouldSucceed bool, t *testing.T) {

	node, err := parseNode(enrString)

	if err != nil {
		if shouldSucceed == true {
			t.Fatal(err)
			t.Fail()
		} else {
			return
		}
	} else {
		if shouldSucceed == false {
			t.Fatal("testEnr succeeded when it should have failed")
			t.Fail()
		}
	}

	fmt.Println("ID", node.ID())
	fmt.Println("IP", node.IP())
	fmt.Println("Port", node.TCP())

	fmt.Println("PubKey", base64.StdEncoding.EncodeToString(node.Pubkey().PubData))
	//fmt.Println("Address1", crypto.Keccak256Hash(node.Pubkey().PubData).Hex())
	//pub, err := cryptobase.SigAlg.SerializePublicKey(node.Pubkey())
	//if err != nil {
	//	t.Fatal(err)
	//	t.Fail()
	//}
	//fmt.Println("Address2", crypto.Keccak256Hash(pub).Hex())

	add, err := cryptobase.SigAlg.PublicKeyToAddress(node.Pubkey())
	if err != nil {
		t.Fatal(err)
		t.Fail()
	}

	fmt.Println("Address", add)
}
