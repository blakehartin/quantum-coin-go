// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
/*
 * QC Read API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"os"
	qcreadapi "github.com/QuantumCoinProject/qc/relay/qcreadapi"
	qcwriteapi "github.com/QuantumCoinProject/qc/relay/qcwriteapi"
	"strconv"
	"strings"
)

type Config struct {
	Api		string `json:"api"`
	Ip		string `json:"ip"`
	Port	string `json:"port"`
	DpUrl   string `json:"dpurl"`
	CorsAllowedOrigins    string `json:"corsAllowedOrigins"`
	EnableAuth bool `json:"enableAuth"`
	ApiKeys string `json:"apiKeys"`
}

type Configs struct {
	Configs []Config `json:"configs"`
}

func main() {
	if len(os.Args) < 2 {
		printHelp()
		return
	}

	file := os.Args[1]
	configs, err := readConfigJsonDataFile(file)

	if err != nil {
		fmt.Println(err.Error())
		return
	}

	if len(configs) < 1 {
		fmt.Println("Check config json file")
		return
	}

	for _, config := range configs{
		api := config.Api
		ip := config.Ip
		port := config.Port
		dpUrl := config.DpUrl
		corsAllowedOrigins := config.CorsAllowedOrigins
		enableAuth := config.EnableAuth
		apiKeys := config.ApiKeys

		if net.ParseIP(ip) == nil {
			fmt.Println("Check configuration ip value ", ip)
			return
		}

		if _, err := strconv.Atoi(port); err != nil {
			fmt.Println("Check configuration port value ", port)
			return
		}

		if strings.EqualFold(api ,"read") {
			go qcReadApi(ip, port, dpUrl, corsAllowedOrigins,enableAuth,apiKeys)
		}

		if strings.EqualFold(api ,"write") {
			go qcWriteApi(ip, port, dpUrl, corsAllowedOrigins,enableAuth,apiKeys)
		}
	}

	fmt.Println("Relay listen and server...")
	<-make(chan int)
}

func qcReadApi(ip string, port string, dpUrl string, corsAllowedOrigins string, enableAuth bool, apiKeys string) {
	ReadApiAPIService := qcreadapi.NewReadApiAPIService(dpUrl)
	ReadApiAPIController := qcreadapi.NewReadApiAPIController(ReadApiAPIService, corsAllowedOrigins, enableAuth, apiKeys)
	readRouter := qcreadapi.NewRouter(ReadApiAPIController)

	fmt.Println("Read api server is listening on : ", ip + ":" + port, "dpUrl" + ":" + dpUrl, "corsAllowedOrigins" + ":" + corsAllowedOrigins)
	http.ListenAndServe(ip + ":" + port, readRouter)
}

func qcWriteApi(ip string, port string, dpUrl string, corsAllowedOrigins string, enableAuth bool, apiKeys string) {
	WriteApiAPIService := qcwriteapi.NewWriteApiAPIService(dpUrl)
	WriteApiAPIController := qcwriteapi.NewWriteApiAPIController(WriteApiAPIService, corsAllowedOrigins, enableAuth, apiKeys)
	writeRouter := qcwriteapi.NewRouter(WriteApiAPIController)

	fmt.Println("Write api server is listening on : ", ip + ":" + port, "dpUrl" + ":" + dpUrl, "corsAllowedOrigins" + ":" + corsAllowedOrigins)
	http.ListenAndServe(ip + ":" + port,  writeRouter)
}

func readConfigJsonDataFile(filename string)  ([]Config, error) {
	if _, err := os.Stat(filename); err != nil {
		return nil, errors.New("File not found " + filename)
	}

	fileContent, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer fileContent.Close()

	byteResult, err  := ioutil.ReadAll(fileContent)
	if err != nil {
		return nil, err
	}

	byteResult = bytes.TrimPrefix(byteResult, []byte("\xef\xbb\xbf")) // Or []byte{239, 187, 191}

	var configs []Config
	err = json.Unmarshal([]byte(byteResult), &configs)
	if err != nil {
		return nil, err
	}

	return configs, nil
}

func printHelp() {
	fmt.Println("===========")
	fmt.Println("relay config.json")
	fmt.Println("===========")
}
